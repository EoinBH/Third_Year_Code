--Question 1.1
--SQL
SELECT nomE, pilote, nomP, prénomP
FROM LesEcuries JOIN LesPilotes ON (pilote1 = pilote OR pilote2 = pilote);
--Algèbre
(LesEcuries(pilote1 = pilote OU pilote2 = pilote)*LesPilotes)[nomE, pilote, nomP, prénomP]

--Question 1.2
--SQL
SELECT C.nomC, pays, nomP, prénomP, rang
FROM LesRésultats R JOIN LesCourses C ON (R.nomC = C.nomC) NATURAL JOIN LesPilotes;
--Algèbre
R <– LesRésultats;
C <– LesCourses;
((R(R.nomC = C.nomC)*C)*LesPilotes)[C.nomC, pays, nomP, prénomP, rang]

--Question 1.3
--SQL
SELECT nomP, prénomP
FROM LesRésultats NATURAL JOIN LesPilotes
GROUP BY nomP, prénomP
HAVING count(nomC) = (SELECT count(distinct nomC) FROM Les Résultats);
--Algèbre
(LesRésultats*LesPilotes)[nomC,nomP,prénomP] / LesRésultats[nomC]

--Question 1.4
--SQL
SELECT R.nomC, R.pilote, nvl(P.points,0)
FROM LesRésultats R LEFT OUTER JOIN LesPoints P ON R.rang = P.rang;
--Algèbre
(LesRésultats*LesPoints)[nomC, pilote, points]

--Question 1.5
--SQL
WITH CoursePilotePoints AS (SELECT R.nomC, R.pilote, nvl(P.points,0) FROM LesRésultats R LEFT OUTER JOIN LesPoints P ON R.rang = P.rang)
SELECT E.nomE, sum(nvl(C.points,0))
FROM LesEcuries E JOIN CoursePilotePoints C ON (C.pilote = E.pilote1 OR C.pilote = E.pilote2)
GROUP BY E.nomE;

--Question 2
CREATE VIEW LesNbPolePos(nomP, prénomP, nbPol) AS
SELECT P.nomP, P.prénomP, count(E.temps)
FROM LesPilotes P NATURAL JOIN LesEssais E
WHERE E.temps = ()
